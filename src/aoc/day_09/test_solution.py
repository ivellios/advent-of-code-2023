import pytest

from aoc.base import BaseTestChallenge
from . import Challenge


class TestChallenge(BaseTestChallenge):
    challenge_class = Challenge
    expected_results_from_test_data = (114, 2)
    expected_results_from_real_data = (2038472161, 1091)

    def test_on_sample_data_part_1_b1(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            0 3 6 9 12 15
            """
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == 18

    def test_on_sample_data_part_1_b2(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            1 3 6 10 15 21
            """
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == 28

    def test_on_sample_data_part_1_b3(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            10 13 16 21 30 45
            """
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == 68

    def test_on_sample_data_part_1_b(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            0 3 6 9 12 15
            1 3 6 10 15 21
            10 13 16 21 30 45
            """
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == 114

    def test_on_sample_data_part_1_f(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            21 32 43 50 52 63 128 354 980 2536 6198 14571 33400 75257 167315 367301 795349 1696172 3558635 7344376 14925482"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == 29926335

    def test_on_sample_data_part_1_g(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            16 28 44 81 180 415 900 1791 3272 5500 8463 11676 13599 10595 -4866 -47200 -142354 -333762 -685820 -1270723 -2098484"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == -2891775

    def test_on_sample_data_part_1_h(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            3 1 -1 -3 -5 -7 -9 -11 -13 -15 -17 -19 -21 -23 -25 -27 -29 -31 -33 -35 -37"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == -39

    def test_on_sample_data_part_1_i(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            8 5 15 61 188 492 1161 2523 5091 9586 16903 27954 43260 62044 80358 87401 58574 -57129 -359205 -1033041 -2411304"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == -5071864

    @pytest.mark.parametrize(
        "input_line,expected",
        (
            ("29 42 53 56 39 -4 -34 127 1001 3868 11543 29740 69331 149906 305152 590695 1095189 1955590 3377721 5663416 9245727", 14733888,),
            ("4 13 31 69 161 382 885 1967 4170 8430 16326 30587 56237 103154 191459 362164 697242 1356689 2647559 5156471 10012899", 19424548,),
            ("8 14 21 35 62 107 169 235 286 352 697 2286 7805 23735 64493 160875 377960 854409 1890137 4141400 9048308", 19751566,),
            ("-2 0 12 46 132 343 844 1984 4452 9527 19484 38295 72924 135831 249908 458206 842858 1561142 2912508 5459800 10242444", 19141163,),
            ("16 42 79 127 186 256 337 429 532 646 771 907 1054 1212 1381 1561 1752 1954 2167 2391 2626", 2872,),
            ("-4 9 49 128 256 441 689 1004 1388 1841 2361 2944 3584 4273 5001 5756 6524 7289 8033 8736 9376", 9929,),
            ("6 15 41 99 222 476 978 1915 3562 6297 10611 17111 26514 39630 57332 80511 110014 146563 190653 242427 301526", 366912,),
            ("17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57", 59,),
            ("11 16 34 80 183 405 879 1875 3912 7964 15871 31182 60871 118775 232387 456109 896725 1761432 3446324 6695212 12877019", 24457233,),
            ("12 27 71 159 310 551 921 1475 2288 3459 5115 7415 10554 14767 20333 27579 36884 48683 63471 81807 104318", 131703,),

            ("25 39 67 123 222 381 631 1047 1800 3232 5952 10948 19707 34332 57642 93238 145515 219597 321169 456177 630364", 848607),
            ("0 5 27 89 226 485 938 1719 3105 5678 10630 20317 39265 76053 146973 283300 545702 1052215 2030893 3915501 7513460", 14290953),
            ("17 36 76 147 258 419 648 991 1582 2816 5801 13425 32663 79211 186233 420013 906687 1876052 3730754 7151959 13255880", 23819179),
            ("7 11 17 38 109 303 743 1609 3143 5659 9569 15440 24101 36823 55599 83555 125527 188843 284353 427754 641261", 955679),
            ("8 14 30 74 164 316 543 855 1260 1766 2384 3132 4040 5156 6553 8337 10656 13710 17762 23150 30300", 39740),
            ("9 29 71 151 297 560 1025 1822 3137 5223 8411 13121 19873 29298 42149 59312 81817 110849 147759 194075 251513", 321988),
            ("2 5 6 11 45 174 534 1367 3067 6242 11801 21078 36008 59373 95139 148908 228512 344779 512504 751661 1088895", 1559336),
            ("3 -5 -6 15 91 296 783 1837 3951 7968 15412 29285 55880 108627 215786 435173 881471 1775732 3533590 6920582 13323821", 25226921),
            ("11 18 25 32 46 101 291 827 2155 5217 12011 26726 57918 122488 252680 508039 995457 1902498 3552967 6500842 11692428", 20752813),
            ("11 24 37 50 63 76 89 102 115 128 141 154 167 180 193 206 219 232 245 258 271", 284),
            ("13 24 35 46 57 68 79 90 101 112 123 134 145 156 167 178 189 200 211 222 233", 244),
            ("22 28 44 84 162 292 488 764 1134 1612 2212 2948 3834 4884 6112 7532 9158 11004 13084 15412 18002", 20868),
            ("27 45 67 96 138 201 294 428 633 1028 2015 4713 11804 29030 67658 148319 306727 601895 1127587 2027878 3517838", 5910511),
            ("8 30 63 121 237 485 1024 2185 4646 9781 20348 41841 85141 171666 343209 680367 1336484 2599512 5004405 9537913 18013797", 33763291),
            ("10 10 14 42 136 379 933 2105 4463 9056 17866 34769 67544 131882 258944 508821 993268 1912306 3610674 6661600 11986844", 21023305),
            ("7 13 25 66 168 379 783 1537 2936 5525 10284 18918 34291 61055 106548 182077 304773 500317 807003 1281842 2009738", 3117203),
            ("11 21 36 60 108 208 400 741 1351 2584 5494 12906 31614 76529 178004 394079 830019 1668255 3212664 5952008 10648248", 18456294),
            ("2 10 19 29 40 52 65 79 94 110 127 145 164 184 205 227 250 274 299 325 352", 380),
            ("-5 2 29 85 179 320 517 779 1115 1534 2045 2657 3379 4220 5189 6295 7547 8954 10525 12269 14195", 16312),
            ("4 14 39 89 175 320 578 1060 1967 3636 6638 12065 22361 43471 89833 195044 433277 960398 2090534 4436219 9163714", 18461066),
        )
    )
    def test_on_sample_data_part_1_j(self, input_line, expected):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in f"""
            {input_line}"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == expected

    @pytest.mark.parametrize(
        "input_line,expected",
        (
            ("6 19 45 94 175 299 503 910 1840 4000 8832 19224 41044 86435 180702 376335 781063 1613369 3311338 6743524 13610498", 27192351,),
        )
    )
    def test_on_sample_data_part_1_k(self, input_line, expected):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in f"""
            {input_line}"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_1() == expected

    def test_on_sample_data_part_2a(self):
        challenge = self.challenge_class()
        challenge._input_lines = [
            line.strip()
            for line in """
            10  13 16  21  30  45"""
            .split(
                "\n"
            )
            if line.strip() != ""
        ]

        assert challenge.part_2() == 5
